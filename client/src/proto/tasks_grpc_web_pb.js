/**
 * @fileoverview gRPC-Web generated client stub for tasks
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v2.0.1
// 	protoc              v6.32.0
// source: tasks.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js')
const proto = {};
proto.tasks = require('./tasks_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.tasks.TasksClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.tasks.TasksPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tasks.ListRequest,
 *   !proto.tasks.ListResponse>}
 */
const methodDescriptor_Tasks_List = new grpc.web.MethodDescriptor(
  '/tasks.Tasks/List',
  grpc.web.MethodType.UNARY,
  proto.tasks.ListRequest,
  proto.tasks.ListResponse,
  /**
   * @param {!proto.tasks.ListRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.tasks.ListResponse.deserializeBinary
);


/**
 * @param {!proto.tasks.ListRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.tasks.ListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.tasks.ListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tasks.TasksClient.prototype.list =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tasks.Tasks/List',
      request,
      metadata || {},
      methodDescriptor_Tasks_List,
      callback);
};


/**
 * @param {!proto.tasks.ListRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.tasks.ListResponse>}
 *     Promise that resolves to the response
 */
proto.tasks.TasksPromiseClient.prototype.list =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tasks.Tasks/List',
      request,
      metadata || {},
      methodDescriptor_Tasks_List);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tasks.GetRequest,
 *   !proto.tasks.Task>}
 */
const methodDescriptor_Tasks_Get = new grpc.web.MethodDescriptor(
  '/tasks.Tasks/Get',
  grpc.web.MethodType.UNARY,
  proto.tasks.GetRequest,
  proto.tasks.Task,
  /**
   * @param {!proto.tasks.GetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.tasks.Task.deserializeBinary
);


/**
 * @param {!proto.tasks.GetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.tasks.Task)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.tasks.Task>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tasks.TasksClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tasks.Tasks/Get',
      request,
      metadata || {},
      methodDescriptor_Tasks_Get,
      callback);
};


/**
 * @param {!proto.tasks.GetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.tasks.Task>}
 *     Promise that resolves to the response
 */
proto.tasks.TasksPromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tasks.Tasks/Get',
      request,
      metadata || {},
      methodDescriptor_Tasks_Get);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tasks.CreateRequest,
 *   !proto.tasks.Task>}
 */
const methodDescriptor_Tasks_Create = new grpc.web.MethodDescriptor(
  '/tasks.Tasks/Create',
  grpc.web.MethodType.UNARY,
  proto.tasks.CreateRequest,
  proto.tasks.Task,
  /**
   * @param {!proto.tasks.CreateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.tasks.Task.deserializeBinary
);


/**
 * @param {!proto.tasks.CreateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.tasks.Task)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.tasks.Task>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tasks.TasksClient.prototype.create =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tasks.Tasks/Create',
      request,
      metadata || {},
      methodDescriptor_Tasks_Create,
      callback);
};


/**
 * @param {!proto.tasks.CreateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.tasks.Task>}
 *     Promise that resolves to the response
 */
proto.tasks.TasksPromiseClient.prototype.create =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tasks.Tasks/Create',
      request,
      metadata || {},
      methodDescriptor_Tasks_Create);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tasks.UpdateRequest,
 *   !proto.tasks.Task>}
 */
const methodDescriptor_Tasks_Update = new grpc.web.MethodDescriptor(
  '/tasks.Tasks/Update',
  grpc.web.MethodType.UNARY,
  proto.tasks.UpdateRequest,
  proto.tasks.Task,
  /**
   * @param {!proto.tasks.UpdateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.tasks.Task.deserializeBinary
);


/**
 * @param {!proto.tasks.UpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.tasks.Task)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.tasks.Task>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tasks.TasksClient.prototype.update =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tasks.Tasks/Update',
      request,
      metadata || {},
      methodDescriptor_Tasks_Update,
      callback);
};


/**
 * @param {!proto.tasks.UpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.tasks.Task>}
 *     Promise that resolves to the response
 */
proto.tasks.TasksPromiseClient.prototype.update =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tasks.Tasks/Update',
      request,
      metadata || {},
      methodDescriptor_Tasks_Update);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tasks.PatchRequest,
 *   !proto.tasks.Task>}
 */
const methodDescriptor_Tasks_Patch = new grpc.web.MethodDescriptor(
  '/tasks.Tasks/Patch',
  grpc.web.MethodType.UNARY,
  proto.tasks.PatchRequest,
  proto.tasks.Task,
  /**
   * @param {!proto.tasks.PatchRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.tasks.Task.deserializeBinary
);


/**
 * @param {!proto.tasks.PatchRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.tasks.Task)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.tasks.Task>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tasks.TasksClient.prototype.patch =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tasks.Tasks/Patch',
      request,
      metadata || {},
      methodDescriptor_Tasks_Patch,
      callback);
};


/**
 * @param {!proto.tasks.PatchRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.tasks.Task>}
 *     Promise that resolves to the response
 */
proto.tasks.TasksPromiseClient.prototype.patch =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tasks.Tasks/Patch',
      request,
      metadata || {},
      methodDescriptor_Tasks_Patch);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tasks.DeleteRequest,
 *   !proto.tasks.DeleteResponse>}
 */
const methodDescriptor_Tasks_Delete = new grpc.web.MethodDescriptor(
  '/tasks.Tasks/Delete',
  grpc.web.MethodType.UNARY,
  proto.tasks.DeleteRequest,
  proto.tasks.DeleteResponse,
  /**
   * @param {!proto.tasks.DeleteRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.tasks.DeleteResponse.deserializeBinary
);


/**
 * @param {!proto.tasks.DeleteRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.tasks.DeleteResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.tasks.DeleteResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tasks.TasksClient.prototype.delete =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tasks.Tasks/Delete',
      request,
      metadata || {},
      methodDescriptor_Tasks_Delete,
      callback);
};


/**
 * @param {!proto.tasks.DeleteRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.tasks.DeleteResponse>}
 *     Promise that resolves to the response
 */
proto.tasks.TasksPromiseClient.prototype.delete =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tasks.Tasks/Delete',
      request,
      metadata || {},
      methodDescriptor_Tasks_Delete);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tasks.BulkDeleteRequest,
 *   !proto.tasks.BulkDeleteResponse>}
 */
const methodDescriptor_Tasks_BulkDelete = new grpc.web.MethodDescriptor(
  '/tasks.Tasks/BulkDelete',
  grpc.web.MethodType.UNARY,
  proto.tasks.BulkDeleteRequest,
  proto.tasks.BulkDeleteResponse,
  /**
   * @param {!proto.tasks.BulkDeleteRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.tasks.BulkDeleteResponse.deserializeBinary
);


/**
 * @param {!proto.tasks.BulkDeleteRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.tasks.BulkDeleteResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.tasks.BulkDeleteResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tasks.TasksClient.prototype.bulkDelete =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tasks.Tasks/BulkDelete',
      request,
      metadata || {},
      methodDescriptor_Tasks_BulkDelete,
      callback);
};


/**
 * @param {!proto.tasks.BulkDeleteRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.tasks.BulkDeleteResponse>}
 *     Promise that resolves to the response
 */
proto.tasks.TasksPromiseClient.prototype.bulkDelete =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tasks.Tasks/BulkDelete',
      request,
      metadata || {},
      methodDescriptor_Tasks_BulkDelete);
};


module.exports = proto.tasks;

